{
  "AWSTemplateFormatVersion" : "2010-09-09",
  "Transform" : "AWS::Serverless-2016-10-31",
  "Description" : "An AWS Serverless Application that uses the ASP.NET Core framework running in Amazon Lambda.",

  "Parameters" : {
    "ShouldCreateBucket" : {
      "Type" : "String",        
      "AllowedValues" : ["true", "false"],
      "Description" : "If true then the S3 bucket that will be proxied will be created with the CloudFormation stack."
    },
	"ShouldCreateObjectBucket" : {
      "Type" : "String",        
      "AllowedValues" : ["true", "false"],
      "Description" : "If true then the S3 object bucket that will be proxied will be created with the CloudFormation stack."
    },  
    "BucketName" : {
        "Type" : "String",
        "Description" : "Name of S3 bucket that will be proxied. If left blank a new bucket will be created.",
        "MinLength" : "0"
    },
	"ObjectBucketName" : {
		"Type" : "String",
        "Description" : "Name of S3 bucket that will be used for object extraction. If left blank a new bucket will be created.",
        "MinLength" : "0"
	},
	"DbUsername" : {
		"Type" : "String",
        "Description" : "The DB Username",
        "MinLength" : "1"
	},
	"DbPassword" : {
		"Type" : "String",
        "Description" : "The DB Password",
        "MinLength" : "1"
	}
  },

  "Conditions" : {
    "CreateS3Bucket" : { "Fn::Equals" : [ { "Ref" : "ShouldCreateBucket" }, "true"] },
	"CreateS3ObjectBucket" : { "Fn::Equals" : [ { "Ref" : "ShouldCreateObjectBucket" }, "true"] },
    "BucketNameGenerated" : { "Fn::Equals" : [ { "Ref" : "BucketName" }, ""] },
	"ObjectBucketNameGenerated" : { "Fn::Equals" : [ { "Ref" : "ObjectBucketName" }, ""] }
  },

  "Resources" : {

    "Get" : {
      "Type" : "AWS::Serverless::Function",
      "Properties": {
        "Handler": "SAM::SAM.LambdaEntryPoint::FunctionHandlerAsync",
        "Runtime": "dotnetcore1.0",
        "CodeUri": "",
        "MemorySize": 1024,
        "Timeout": 30,
        "Role": null,
        "Policies": [ "AWSLambdaFullAccess" ],
        "Environment" : {
          "Variables" : {
            "AppS3Bucket" : { "Fn::If" : ["CreateS3Bucket", {"Ref":"Bucket"}, { "Ref" : "BucketName" } ] }
          }
        },
        "Events": {
          "PutResource": {
            "Type": "Api",
            "Properties": {
              "Path": "/{proxy+}",
              "Method": "ANY"
            }
          }
        }
      }
    },
	"LinkExtractorProcessor" : {
      "Type" : "AWS::Serverless::Function",
      "Properties": {
        "Handler": "SAM::SAM.Applications.LinkExtractor.Processor::Handler",
        "Runtime": "dotnetcore1.0",
        "CodeUri": "",
        "MemorySize": 1024,
        "Timeout": 300,
        "Role": null,
        "Policies": [ "AWSLambdaFullAccess", "AmazonSNSFullAccess", "AmazonSQSFullAccess" ],
        "Environment" : {
          "Variables" : {
            "AppS3Bucket" : { "Fn::If" : ["CreateS3Bucket", {"Ref":"Bucket"}, { "Ref" : "BucketName" } ] },
			"Topic": { "Ref" : "LinkExtractorTopic" },
			"Queue": { "Ref" : "LinkExtractorQueue" }
          }
        }
      }
    },
	"LinkExtractorFunction" : {
      "Type" : "AWS::Serverless::Function",
      "Properties": {
        "Handler": "SAM::SAM.Applications.LinkExtractor.Queue::Handler",
        "Runtime": "dotnetcore1.0",
        "CodeUri": "",
        "MemorySize": 1024,
        "Timeout": 300,
        "Role": null,
        "Policies": [ "AWSLambdaFullAccess", "AmazonSQSFullAccess" ],
        "Environment" : {
          "Variables" : {
            "AppS3Bucket" : { "Fn::If" : ["CreateS3Bucket", {"Ref":"Bucket"}, { "Ref" : "BucketName" } ] },
			"Queue": { "Ref" : "LinkExtractorQueue" }
          }
        }
      }
    },
	"LinkExtractor" : {
      "Type" : "AWS::Serverless::Function",
      "Properties": {
        "Handler": "SAM::SAM.Applications.LinkExtractor.LinkExtractor::Handler",
        "Runtime": "dotnetcore1.0",
        "CodeUri": "",
        "MemorySize": 1024,
        "Timeout": 300,
        "Role": null,
        "Policies": [ "AWSLambdaFullAccess", "AmazonSQSFullAccess" ],
        "Environment" : {
          "Variables" : {
            "AppS3Bucket" : { "Fn::If" : ["CreateS3Bucket", {"Ref":"Bucket"}, { "Ref" : "BucketName" } ] },
			"Queue": { "Ref" : "LinkExtractorQueue" }
          }
        }
      }
    },
	"LinkCheckerProcessor" : {
      "Type" : "AWS::Serverless::Function",
      "Properties": {
        "Handler": "SAM::SAM.Applications.LinkChecker.Processor::Handler",
        "Runtime": "dotnetcore1.0",
        "CodeUri": "",
        "MemorySize": 1024,
        "Timeout": 300,
        "Role": null,
        "Policies": [ "AWSLambdaFullAccess", "AmazonSNSFullAccess", "AmazonSQSFullAccess" ],
        "Environment" : {
          "Variables" : {
            "AppS3Bucket" : { "Fn::If" : ["CreateS3Bucket", {"Ref":"Bucket"}, { "Ref" : "BucketName" } ] },
			"Topic": { "Ref" : "LinkCheckerTopic" },
			"Queue": { "Ref" : "LinkCheckerQueue" }
          }
        }
      }
    },
	"LinkCheckerFunction" : {
      "Type" : "AWS::Serverless::Function",
      "Properties": {
        "Handler": "SAM::SAM.Applications.LinkChecker.Queue::Handler",
        "Runtime": "dotnetcore1.0",
        "CodeUri": "",
        "MemorySize": 1024,
        "Timeout": 300,
        "Role": null,
        "Policies": [ "AWSLambdaFullAccess", "AmazonSQSFullAccess" ],
        "Environment" : {
          "Variables" : {
            "AppS3Bucket" : { "Fn::If" : ["CreateS3Bucket", {"Ref":"Bucket"}, { "Ref" : "BucketName" } ] },
			"Queue": { "Ref" : "LinkCheckerQueue" }
          }
        }
      }
    },
	"LinkChecker" : {
      "Type" : "AWS::Serverless::Function",
      "Properties": {
        "Handler": "SAM::SAM.Applications.LinkChecker.LinkChecker::Handler",
        "Runtime": "dotnetcore1.0",
        "CodeUri": "",
        "MemorySize": 1024,
        "Timeout": 300,
        "Role": null,
        "Policies": [ "AWSLambdaFullAccess", "AmazonSQSFullAccess" ],
        "Environment" : {
          "Variables" : {
            "AppS3Bucket" : { "Fn::If" : ["CreateS3Bucket", {"Ref":"Bucket"}, { "Ref" : "BucketName" } ] },
			"Queue": { "Ref" : "LinkCheckerQueue" }
          }
        }
      }
    },
	"ObjectExtractor" : {
      "Type" : "AWS::Serverless::Function",
      "Properties": {
        "Handler": "SAM::SAM.Applications.ObjectExtractor::Handler",
        "Runtime": "dotnetcore1.0",
        "CodeUri": "",
        "MemorySize": 1024,
        "Timeout": 300,
        "Role": null,
        "Policies": [ "AWSLambdaFullAccess", "AmazonS3FullAccess" ],
        "Environment" : {
          "Variables" : {
            
          }
        }
      }
    },

    "Bucket" : {
        "Type" : "AWS::S3::Bucket",
        "Condition" : "CreateS3Bucket",
        "Properties" : {
            "BucketName" : { "Fn::If" : ["BucketNameGenerated", {"Ref" : "AWS::NoValue" }, { "Ref" : "BucketName" } ] }
        }
    },
	"ObjectBucket" : {
        "Type" : "AWS::S3::Bucket",
        "Condition" : "CreateS3ObjectBucket",
        "Properties" : {
            "BucketName" : { "Fn::If" : ["ObjectBucketNameGenerated", {"Ref" : "AWS::NoValue" }, { "Ref" : "ObjectBucketName" } ] },
			"NotificationConfiguration" : {
				"LambdaConfigurations" : [{
					"Function" : { "Fn::GetAtt" : [ "ObjectExtractor", "Arn" ] },
					"Event" : "s3:ObjectCreated:*"
				},
				{
					"Function" : { "Fn::GetAtt" : [ "ObjectExtractor", "Arn" ] },
					"Event" : "s3:ObjectRemoved:DeleteMarkerCreated"
				}]
			}
        }
    },
	"ObjectBucketLambdaPermission": {
      "Type": "AWS::Lambda::Permission",
      "Properties" : {
        "Action": "lambda:InvokeFunction",
        "FunctionName": { "Fn::GetAtt" : [ "ObjectExtractor", "Arn" ] },
        "Principal": "s3.amazonaws.com",
        "SourceAccount": { "Ref": "AWS::AccountId" }
      }
    },

	"LinkExtractorQueue" : {
		"Type" : "AWS::SQS::Queue",
		"Properties" : {
			"VisibilityTimeout": 0
		}
	},
	"LinkCheckerQueue" : {
		"Type" : "AWS::SQS::Queue",
		"Properties" : {
			"VisibilityTimeout": 0
		}
	},

	"LinkExtractorTopic" : {
		"Type" : "AWS::SNS::Topic",
		"Properties" : {
			"Subscription" : [ 
			{
				"Endpoint": {
					"Fn::GetAtt": [ "LinkExtractorFunction", "Arn" ]
				},
				"Protocol": "lambda"
			} ]
		}
	},
	"LinkExtractorTopicPermissions" : {
		"Type": "AWS::Lambda::Permission",
		"Properties": {
			"Action": "lambda:InvokeFunction",
			"Principal": "sns.amazonaws.com",
			"SourceArn": {
				"Ref" : "LinkExtractorTopic"
			},
			"FunctionName": {
				"Fn::GetAtt": [ "LinkExtractorFunction", "Arn" ]
			}
		}
	},

	"LinkCheckerTopic" : {
		"Type" : "AWS::SNS::Topic",
		"Properties" : {
			"Subscription" : [ 
			{
				"Endpoint": {
					"Fn::GetAtt": [ "LinkCheckerFunction", "Arn" ]
				},
				"Protocol": "lambda"
			} ]
		}
	},
	"LinkCheckerTopicPermissions" : {
		"Type": "AWS::Lambda::Permission",
		"Properties": {
			"Action": "lambda:InvokeFunction",
			"Principal": "sns.amazonaws.com",
			"SourceArn": {
				"Ref" : "LinkCheckerTopic"
			},
			"FunctionName": {
				"Fn::GetAtt": [ "LinkCheckerFunction", "Arn" ]
			}
		}
	},

	"RDS": {  
         "Type":"AWS::RDS::DBInstance",
         "Properties":{  
            "AllocatedStorage":"200",
            "DBInstanceClass":"db.t2.medium",
            "Engine":"sqlserver-ex",
            "MasterUsername": { "Ref":"DbUsername" },
            "MasterUserPassword": { "Ref":"DbPassword" },
            "VPCSecurityGroups": 
			[ 
				{ "Fn::GetAtt": [ "DBSecurityGroup", "GroupId" ] }
            ]
         },
         "DeletionPolicy":"Snapshot"
      },
    "DBSecurityGroup": {  
         "Type":"AWS::EC2::SecurityGroup",
         "Properties":{  
            "GroupDescription":"Enable HTTP access via port 80 and SSH access",
            "SecurityGroupIngress":[  
               {  
                  "IpProtocol":"tcp",
                  "FromPort":"1433",
                  "ToPort":"1433",
                  "CidrIp":"0.0.0.0/0"
               }
            ]
         }
      }
  },

  "Outputs" : {
    "S3ProxyBucket" : {
        "Value" : { "Fn::If" : ["CreateS3Bucket", {"Ref":"Bucket"}, { "Ref" : "BucketName" } ] }
    },
	"S3ObjectBucket" : {
        "Value" : { "Fn::If" : ["CreateS3Bucket", {"Ref":"ObjectBucket"}, { "Ref" : "ObjectBucketName" } ] }
    }
  }
}