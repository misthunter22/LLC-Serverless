{
  "AWSTemplateFormatVersion" : "2010-09-09",
  "Transform" : "AWS::Serverless-2016-10-31",
  "Description" : "An AWS Serverless Application that uses the ASP.NET Core framework running in Amazon Lambda.",

  "Parameters" : {
    "ShouldCreateBucket" : {
      "Type" : "String",        
      "AllowedValues" : ["true", "false"],
      "Description" : "If true then the S3 bucket that will be proxied will be created with the CloudFormation stack."
    },  
    "BucketName" : {
        "Type" : "String",
        "Description" : "Name of S3 bucket that will be proxied. If left blank a new bucket will be created.",
        "MinLength" : "0"
    },
	"ObjectBucketName" : {
		"Type" : "String",
        "Description" : "Name of S3 bucket that will be used for object extraction. If left blank a new bucket will be created.",
        "MinLength" : "0"
	},
	"Environment" : {
		"Type" : "String",
        "Description" : "Name of the environment so multiple stacks can be deployed to an account. Must be unique across an account. Can leave blank as well!",
        "MinLength" : "0"
	}
  },

  "Conditions" : {
    "CreateS3Bucket" : { "Fn::Equals" : [ { "Ref" : "ShouldCreateBucket" }, "true"] },
    "BucketNameGenerated" : { "Fn::Equals" : [ { "Ref" : "BucketName" }, ""] },
	"ObjectBucketNameGenerated" : { "Fn::Equals" : [ { "Ref" : "ObjectBucketName" }, ""] }
  },

  "Resources" : {

    "Get" : {
      "Type" : "AWS::Serverless::Function",
      "Properties": {
        "Handler": "SAM::SAM.LambdaEntryPoint::FunctionHandlerAsync",
        "Runtime": "dotnetcore1.0",
        "CodeUri": "",
        "MemorySize": 1024,
        "Timeout": 30,
        "Role": null,
        "Policies": [ "AWSLambdaFullAccess" ],
        "Environment" : {
          "Variables" : {
            "AppS3Bucket" : { "Fn::If" : ["CreateS3Bucket", {"Ref":"Bucket"}, { "Ref" : "BucketName" } ] }
          }
        },
        "Events": {
          "PutResource": {
            "Type": "Api",
            "Properties": {
              "Path": "/{proxy+}",
              "Method": "ANY"
            }
          }
        }
      }
    },
	"Count" : {
      "Type" : "AWS::Serverless::Function",
      "Properties": {
        "Handler": "SAM::SAM.Applications.Count::Handler",
        "Runtime": "dotnetcore1.0",
        "CodeUri": "",
        "MemorySize": 1024,
        "Timeout": 30,
        "Role": null,
        "Policies": [ "AWSLambdaFullAccess" ],
        "Environment" : {
          "Variables" : {
            "AppS3Bucket" : { "Fn::If" : ["CreateS3Bucket", {"Ref":"Bucket"}, { "Ref" : "BucketName" } ] }
          }
        }
      }
    },
	"Iterator" : {
      "Type" : "AWS::Serverless::Function",
      "Properties": {
        "Handler": "SAM::SAM.Applications.Iterator::Handler",
        "Runtime": "dotnetcore1.0",
        "CodeUri": "",
        "MemorySize": 1024,
        "Timeout": 30,
        "Role": null,
        "Policies": [ "AWSLambdaFullAccess" ],
        "Environment" : {
          "Variables" : {
            "AppS3Bucket" : { "Fn::If" : ["CreateS3Bucket", {"Ref":"Bucket"}, { "Ref" : "BucketName" } ] }
          }
        }
      }
    },
	"LinkChecker" : {
      "Type" : "AWS::Serverless::Function",
      "Properties": {
        "Handler": "SAM::SAM.Applications.LinkChecker::Handler",
        "Runtime": "dotnetcore1.0",
        "CodeUri": "",
        "MemorySize": 1024,
        "Timeout": 30,
        "Role": null,
        "Policies": [ "AWSLambdaFullAccess" ],
        "Environment" : {
          "Variables" : {
            "AppS3Bucket" : { "Fn::If" : ["CreateS3Bucket", {"Ref":"Bucket"}, { "Ref" : "BucketName" } ] }
          }
        }
      }
    },
	"LinkExtractor" : {
      "Type" : "AWS::Serverless::Function",
      "Properties": {
        "Handler": "SAM::SAM.Applications.LinkExtractor::Handler",
        "Runtime": "dotnetcore1.0",
        "CodeUri": "",
        "MemorySize": 1024,
        "Timeout": 30,
        "Role": null,
        "Policies": [ "AWSLambdaFullAccess" ],
        "Environment" : {
          "Variables" : {
            "AppS3Bucket" : { "Fn::If" : ["CreateS3Bucket", {"Ref":"Bucket"}, { "Ref" : "BucketName" } ] }
          }
        }
      }
    },
	"ObjectExtractor" : {
      "Type" : "AWS::Serverless::Function",
      "Properties": {
        "Handler": "SAM::SAM.Applications.ObjectExtractor::Handler",
        "Runtime": "dotnetcore1.0",
        "CodeUri": "",
        "MemorySize": 1024,
        "Timeout": 30,
        "Role": null,
        "Policies": [ "AWSLambdaFullAccess", "AmazonS3FullAccess" ],
        "Environment" : {
          "Variables" : {
            
          }
        }
      }
    },

    "Bucket" : {
        "Type" : "AWS::S3::Bucket",
        "Condition" : "CreateS3Bucket",
        "Properties" : {
            "BucketName" : { "Fn::If" : ["BucketNameGenerated", {"Ref" : "AWS::NoValue" }, { "Ref" : "BucketName" } ] }
        }
    },

	"ObjectBucket" : {
        "Type" : "AWS::S3::Bucket",
        "Condition" : "CreateS3Bucket",
        "Properties" : {
            "BucketName" : { "Fn::If" : ["ObjectBucketNameGenerated", {"Ref" : "AWS::NoValue" }, { "Ref" : "ObjectBucketName" } ] },
			"NotificationConfiguration" : {
				"LambdaConfigurations" : [{
					"Function" : { "Fn::GetAtt" : [ "ObjectExtractor", "Arn" ] },
					"Event" : "s3:ObjectCreated:*"
				},
				{
					"Function" : { "Fn::GetAtt" : [ "ObjectExtractor", "Arn" ] },
					"Event" : "s3:ObjectRemoved:DeleteMarkerCreated"
				}]
			}
        }
    },
	"ObjectBucketLambdaPermission": {
      "Type": "AWS::Lambda::Permission",
      "Properties" : {
        "Action": "lambda:InvokeFunction",
        "FunctionName": { "Fn::GetAtt" : [ "ObjectExtractor", "Arn" ] },
        "Principal": "s3.amazonaws.com",
        "SourceAccount": { "Ref": "AWS::AccountId" }
      }
    },

	"StepFunctionRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Version" : "2012-10-17",
          "Statement": [ {
            "Effect": "Allow",
            "Principal": {
              "Service": [ "states.us-west-2.amazonaws.com" ]
            },
            "Action": [ "sts:AssumeRole" ]
          } ]
        },
        "Path": "/",
        "Policies": [ { 
		  "PolicyName" : "LORStepFunctionPolicy",
          "PolicyDocument" : {
            "Version" : "2012-10-17",
            "Statement": [ {
              "Effect"   : "Allow",
              "Action"   : [
                "Lambda:Invoke*"
              ],
              "Resource" : "*"
            } ]
          }
        } ]
      }
    },
	"LinkExtractorStep" : {
		"Type" : "AWS::StepFunctions::StateMachine",
        "Properties" : {
			"DefinitionString" : "{\"StartAt\": \"HelloWorld\", \"States\": {\"HelloWorld\": {\"Type\": \"Task\", \"Resource\": \"arn:aws:lambda:us-east-1:111122223333:function:HelloFunction\", \"End\": true}}}",
            "RoleArn" : { "Fn::GetAtt" : [ "StepFunctionRole", "Arn" ] }
		}
    },

	"DbLinks" : {
		"Type" : "AWS::DynamoDB::Table",
		"Properties" : {
		  "AttributeDefinitions" : [
          {
            "AttributeName" : "Id",
            "AttributeType" : "N"   
          }
        ],
		"KeySchema" : [
		  {
            "AttributeName" : "Id",
            "KeyType" : "HASH"
          }
		],
		"ProvisionedThroughput" : {
		  "ReadCapacityUnits" : "30",
          "WriteCapacityUnits" : "3"
		},
		"TableName" : { "Fn::Join" : [ "", [ "LLC-Links", { "Ref" : "Environment" } ] ] }
	  }
	},
	"DbBuckets" : {
		"Type" : "AWS::DynamoDB::Table",
		"Properties" : {
		  "AttributeDefinitions" : [
          {
            "AttributeName" : "Id",
            "AttributeType" : "N"   
          }
        ],
		"KeySchema" : [
		  {
            "AttributeName" : "Id",
            "KeyType" : "HASH"
          }
		],
		"ProvisionedThroughput" : {
		  "ReadCapacityUnits" : "30",
          "WriteCapacityUnits" : "3"
		},
		"TableName" : { "Fn::Join" : [ "", [ "LLC-Buckets", { "Ref" : "Environment" } ] ] }
	  }
	},
	"DbObjects" : {
		"Type" : "AWS::DynamoDB::Table",
		"Properties" : {
		  "AttributeDefinitions" : [
          {
            "AttributeName" : "Id",
            "AttributeType" : "N"   
          }
        ],
		"KeySchema" : [
		  {
            "AttributeName" : "Id",
            "KeyType" : "HASH"
          }
		],
		"ProvisionedThroughput" : {
		  "ReadCapacityUnits" : "30",
          "WriteCapacityUnits" : "3"
		},
		"TableName" : { "Fn::Join" : [ "", [ "LLC-Objects", { "Ref" : "Environment" } ] ] }
	  }
	},
	"DbStats" : {
		"Type" : "AWS::DynamoDB::Table",
		"Properties" : {
		  "AttributeDefinitions" : [
          {
            "AttributeName" : "Id",
            "AttributeType" : "N"   
          }
        ],
		"KeySchema" : [
		  {
            "AttributeName" : "Id",
            "KeyType" : "HASH"
          }
		],
		"ProvisionedThroughput" : {
		  "ReadCapacityUnits" : "5",
          "WriteCapacityUnits" : "3"
		},
		"TableName" : { "Fn::Join" : [ "", [ "LLC-Stats", { "Ref" : "Environment" } ] ] }
	  }
	},
	"DbReports" : {
		"Type" : "AWS::DynamoDB::Table",
		"Properties" : {
		  "AttributeDefinitions" : [
          {
            "AttributeName" : "Id",
            "AttributeType" : "N"   
          }
        ],
		"KeySchema" : [
		  {
            "AttributeName" : "Id",
            "KeyType" : "HASH"
          }
		],
		"ProvisionedThroughput" : {
		  "ReadCapacityUnits" : "50",
          "WriteCapacityUnits" : "3"
		},
		"TableName" : { "Fn::Join" : [ "", [ "LLC-Reports", { "Ref" : "Environment" } ] ] }
	  }
	},
	"DbPackages" : {
		"Type" : "AWS::DynamoDB::Table",
		"Properties" : {
		  "AttributeDefinitions" : [
          {
            "AttributeName" : "Id",
            "AttributeType" : "N"   
          }
        ],
		"KeySchema" : [
		  {
            "AttributeName" : "Id",
            "KeyType" : "HASH"
          }
		],
		"ProvisionedThroughput" : {
		  "ReadCapacityUnits" : "5",
          "WriteCapacityUnits" : "3"
		},
		"TableName" : { "Fn::Join" : [ "", [ "LLC-Packages", { "Ref" : "Environment" } ] ] }
	  }
	},
	"DbPackageFiles" : {
		"Type" : "AWS::DynamoDB::Table",
		"Properties" : {
		  "AttributeDefinitions" : [
          {
            "AttributeName" : "Id",
            "AttributeType" : "N"   
          }
        ],
		"KeySchema" : [
		  {
            "AttributeName" : "Id",
            "KeyType" : "HASH"
          }
		],
		"ProvisionedThroughput" : {
		  "ReadCapacityUnits" : "5",
          "WriteCapacityUnits" : "3"
		},
		"TableName" : { "Fn::Join" : [ "", [ "LLC-PackageFiles", { "Ref" : "Environment" } ] ] }
	  }
	},
	"DbPackageLinks" : {
		"Type" : "AWS::DynamoDB::Table",
		"Properties" : {
		  "AttributeDefinitions" : [
          {
            "AttributeName" : "Id",
            "AttributeType" : "N"   
          }
        ],
		"KeySchema" : [
		  {
            "AttributeName" : "Id",
            "KeyType" : "HASH"
          }
		],
		"ProvisionedThroughput" : {
		  "ReadCapacityUnits" : "5",
          "WriteCapacityUnits" : "3"
		},
		"TableName" : { "Fn::Join" : [ "", [ "LLC-PackageLinks", { "Ref" : "Environment" } ] ] }
	  }
	},
	"DbSettings" : {
		"Type" : "AWS::DynamoDB::Table",
		"Properties" : {
		  "AttributeDefinitions" : [
          {
            "AttributeName" : "Id",
            "AttributeType" : "N"   
          }
        ],
		"KeySchema" : [
		  {
            "AttributeName" : "Id",
            "KeyType" : "HASH"
          }
		],
		"ProvisionedThroughput" : {
		  "ReadCapacityUnits" : "5",
          "WriteCapacityUnits" : "3"
		},
		"TableName" : { "Fn::Join" : [ "", [ "LLC-Settings", { "Ref" : "Environment" } ] ] }
	  }
	},
	"DbSources" : {
		"Type" : "AWS::DynamoDB::Table",
		"Properties" : {
		  "AttributeDefinitions" : [
          {
            "AttributeName" : "Id",
            "AttributeType" : "N"   
          }
        ],
		"KeySchema" : [
		  {
            "AttributeName" : "Id",
            "KeyType" : "HASH"
          }
		],
		"ProvisionedThroughput" : {
		  "ReadCapacityUnits" : "5",
          "WriteCapacityUnits" : "3"
		},
		"TableName" : { "Fn::Join" : [ "", [ "LLC-Sources", { "Ref" : "Environment" } ] ] }
	  }
	},
	"DbObjectLinks" : {
		"Type" : "AWS::DynamoDB::Table",
		"Properties" : {
		  "AttributeDefinitions" : [
          {
            "AttributeName" : "Id",
            "AttributeType" : "N"   
          }
        ],
		"KeySchema" : [
		  {
            "AttributeName" : "Id",
            "KeyType" : "HASH"
          }
		],
		"ProvisionedThroughput" : {
		  "ReadCapacityUnits" : "30",
          "WriteCapacityUnits" : "3"
		},
		"TableName" : { "Fn::Join" : [ "", [ "LLC-ObjectLinks", { "Ref" : "Environment" } ] ] }
	  }
	},
	"DbTableMeta" : {
		"Type" : "AWS::DynamoDB::Table",
		"Properties" : {
		  "AttributeDefinitions" : [
          {
            "AttributeName" : "Id",
            "AttributeType" : "S"   
          }
        ],
		"KeySchema" : [
		  {
            "AttributeName" : "Id",
            "KeyType" : "HASH"
          }
		],
		"ProvisionedThroughput" : {
		  "ReadCapacityUnits" : "5",
          "WriteCapacityUnits" : "3"
		},
		"TableName" : { "Fn::Join" : [ "", [ "LLC-Meta", { "Ref" : "Environment" } ] ] }
	  }
	},
	"DbLinkExtract" : {
		"Type" : "AWS::DynamoDB::Table",
		"Properties" : {
		  "AttributeDefinitions" : [
          {
            "AttributeName" : "Id",
            "AttributeType" : "N"   
          }
        ],
		"KeySchema" : [
		  {
            "AttributeName" : "Id",
            "KeyType" : "HASH"
          }
		],
		"ProvisionedThroughput" : {
		  "ReadCapacityUnits" : "5",
          "WriteCapacityUnits" : "5"
		},
		"TableName" : { "Fn::Join" : [ "", [ "LLC-LinkExtract", { "Ref" : "Environment" } ] ] }
	  }
	}
  },

  "Outputs" : {
    "S3ProxyBucket" : {
        "Value" : { "Fn::If" : ["CreateS3Bucket", {"Ref":"Bucket"}, { "Ref" : "BucketName" } ] }
    },
	"S3ObjectBucket" : {
        "Value" : { "Fn::If" : ["CreateS3Bucket", {"Ref":"ObjectBucket"}, { "Ref" : "ObjectBucketName" } ] }
    }
  }
}